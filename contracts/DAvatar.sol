// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import "@openzeppelin/contracts/utils/Counters.sol";
import "./ERC721Base.sol";

/**
 * @dev a lot of stuff was copied from ERC721PresetMinterPauserAutoId
 * which is used a starting base.
 *
 */
contract DAvatar is ERC721Base {
    /**
     * @dev since libraries can't be inherited, we need this line
     * even though we have it in ERC721Base contract
     */
    using Counters for Counters.Counter;

    constructor(
        string memory _tokenName,
        string memory _tokenSymbol,
        string memory _baseURI
    ) ERC721Base(_tokenName, _tokenSymbol, _baseURI) {}

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address _to, string memory _metadataCid) public returns(uint) {
        require(hasRole(MINTER_ROLE, _msgSender()), "ERC721Base: Minter required");

        _tokenIdTracker.increment();

        uint256 id = _tokenIdTracker.current();
        _safeMint(_to, id);
        _setTokenURI(id, _metadataCid);

        return id;
    }
}
